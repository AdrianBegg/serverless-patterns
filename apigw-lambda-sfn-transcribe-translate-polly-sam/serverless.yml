service: translator
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 300
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "transcribe:*"
          Resource: "*"
        - Effect: Allow
          Action: "s3:*"
          Resource: "*"
        - Effect: Allow
          Action: "logs:*"
          Resource: "*"
        - Effect: Allow
          Action: "translate:TranslateText"
          Resource: "*"
        - Effect: Allow
          Action: "Polly:*"
          Resource: "*"
        - Effect: Allow
          Action: "states:*"
          Resource: "*"
        - Effect: Allow
          Action: "execute-api:*"
          Resource: "*"

functions:
  transcribeLaunch:
    handler: src/transcribeLaunch.handler
  transcribeCheck:
    handler: src/transcribeCheck.handler
  translate:
    handler: src/translate.handler
  speech:
    handler: src/speech.handler

resources:
  Resources:
    TranslatorBucket:
      Type: AWS::S3::Bucket
    InvokeTranslatorLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/aws/lambda/translator-dev-invokeTranslator"
    AuthorizerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/aws/lambda/translator-dev-authorizer"
    InvokerLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: "translator-dev-invokeTranslator"
        Runtime: "nodejs18.x"
        Timeout: 300
        MemorySize: 1024
        Handler: invokeTranslator.handler
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/capstone-translator-role
        CodeUri: src/translator.zip
 #       Code:
 #         S3Bucket: experimental-repo-aviband
 #         S3Key: "capstone-lambdas/translator.zip"
        Environment:
          Variables:
            APIG_ENDPOINT:
              !Join [
                "",
                [
                  !Ref CapstoneWebSocketApi,
                  ".execute-api.",
                  !Ref "AWS::Region",
                  ".amazonaws.com/dev",
                ],
              ]
            statemachine_arn: !Ref Orchestrator
    AuthorizerLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: "translator-dev-authorizer"
        Runtime: "nodejs18.x"
        Timeout: 300
        MemorySize: 1024
        Handler: authorizer.handler
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/capstone-translator-role
        CodeUri: src/translator.zip
 #       Code:
 #         S3Bucket: experimental-repo-aviband
 #         S3Key: "capstone-lambdas/translator.zip"
    InvokerLambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - InvokerLambda
        - CapstoneWebSocketApi
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref InvokerLambda
        Principal: apigateway.amazonaws.com
    AuthorizerLambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - AuthorizerLambda
        - CapstoneWebSocketApi
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref AuthorizerLambda
        Principal: apigateway.amazonaws.com
    ConnectRouteApiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "ConnectRouteApiRole-${AWS::StackName}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
    BlogApiPolicy:
      Type: AWS::IAM::Policy
      DependsOn:
        - ConnectRouteApiRole
        - AuthorizerLambda
        - InvokerLambda
      Properties:
        PolicyName: !Sub "ConnectRoutePolicy-${AWS::StackName}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "lambda:InvokeFunction"
              Resource:
                - !GetAtt AuthorizerLambda.Arn
                - !GetAtt InvokerLambda.Arn
        Roles:
          - !Ref ConnectRouteApiRole
    CapstoneWebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        ProtocolType: WEBSOCKET
        Name: capstone
        RouteSelectionExpression: "$request.body.action"
    CapstoneAuthorizer:
      Type: AWS::ApiGatewayV2::Authorizer
      Properties:
        Name: LambdaAuthorizer
        ApiId: !Ref CapstoneWebSocketApi
        AuthorizerType: REQUEST
        AuthorizerUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt AuthorizerLambda.Arn
            - /invocations
        IdentitySource:
          - route.request.header.X-Forwarded-Proto
    CapstoneConnectIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        IntegrationType: AWS_PROXY
        CredentialsArn: !GetAtt ConnectRouteApiRole.Arn
        IntegrationUri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvokerLambda.Arn}/invocations
        TimeoutInMillis: 28000
    CapstoneConnectRoute:
      Type: AWS::ApiGatewayV2::Route
      DependsOn:
        - CapstoneConnectIntegration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        RouteKey: $connect
        AuthorizationType: CUSTOM
        AuthorizerId: !Ref CapstoneAuthorizer
        Target: !Join
          - /
          - - integrations
            - !Ref CapstoneConnectIntegration
    CapstoneDisconnectIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt InvokerLambda.Arn
            - /invocations
        TimeoutInMillis: 28000
    CapstoneDisconnectRoute:
      Type: AWS::ApiGatewayV2::Route
      DependsOn:
        - CapstoneDisconnectIntegration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        RouteKey: $disconnect
        AuthorizationType: NONE
        Target: !Join
          - /
          - - integrations
            - !Ref CapstoneDisconnectIntegration
    CapstoneDefaultIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt InvokerLambda.Arn
            - /invocations
        TimeoutInMillis: 28000
    CapstoneDefaultRoute:
      Type: AWS::ApiGatewayV2::Route
      DependsOn:
        - CapstoneDefaultIntegration
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        RouteKey: $default
        AuthorizationType: NONE
        Target: !Join
          - /
          - - integrations
            - !Ref CapstoneDefaultIntegration
    Deployment:
      Type: AWS::ApiGatewayV2::Deployment
      DependsOn:
        - CapstoneDefaultRoute
        - CapstoneConnectRoute
        - CapstoneDisconnectRoute
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
    Stage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref CapstoneWebSocketApi
        DeploymentId: !Ref Deployment
        StageName: "dev"
    Orchestrator:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineType: EXPRESS
        LoggingConfiguration:
          Level: ALL
          IncludeExecutionData: true
          Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vendedlogs/states/serverless-capstone-language-converter-Logs:*"
        Definition:
          {
            "StartAt": "StartTranscribe",
            "Version": "1.0",
            "States":
              {
                "StartTranscribe":
                  {
                    "Type": "Task",
                    "Resource": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:translator-dev-transcribeLaunch",
                    "ResultPath": "$",
                    "Next": "WaitState",
                  },
                "WaitState":
                  {
                    "Type": "Wait",
                    "Seconds": 3,
                    "Next": "CheckTranscribe",
                    "InputPath": "$",
                  },
                "CheckTranscribe":
                  {
                    "Type": "Task",
                    "Resource": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:translator-dev-transcribeCheck",
                    "ResultPath": "$",
                    "Next": "ChoiceState",
                  },
                "ChoiceState":
                  {
                    "Type": "Choice",
                    "Choices":
                      [
                        {
                          "Variable": "$.continue",
                          "BooleanEquals": true,
                          "Next": "WaitState",
                        },
                      ],
                    "Default": "Translate",
                  },
                "Translate":
                  {
                    "Type": "Task",
                    "Resource": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:translator-dev-translate",
                    "ResultPath": "$",
                    "Next": "Speech",
                  },
                "Speech":
                  {
                    "Type": "Task",
                    "Resource": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:translator-dev-speech",
                    "ResultPath": "$",
                    "Next": "Done",
                  },
                "Done": { "Type": "Succeed" },
              },
          }
        RoleArn: !GetAtt "OrchestratorRole.Arn"
    OrchestratorRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: !Sub "states.${AWS::Region}.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: stepfn
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action: "logs:*"
                  Resource: "*"
  Outputs:
    StateMachine:
      Value:
        Ref: Orchestrator
    TranslatorBucket:
      Value:
        Ref: TranslatorBucket
    WebsocketAPI:
      Value:
        Ref: CapstoneWebSocketApi
